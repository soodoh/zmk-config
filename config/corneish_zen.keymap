#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define DEFAULT 0
#define NAVI 1
#define MEDIA 2
#define NUM 3
#define SYM 4
#define FN 5

/* Keys */
#define ALL_LEFT 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32
#define CMD_LEFT 3 4 11 13 22 23 24
#define CTRL_LEFT 1 3 4 10 11 21
#define ALL_RIGHT 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35

/* Settings */
#define TAPPING_TERM_MS 200
#define QUICK_TAP_MS 175
#define PRIOR_IDLE_MS 100
#define COMBO_TIMEOUT_MS 50

/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        lcmd: left_cmd_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_CMD_MOD";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <ALL_RIGHT CMD_LEFT>;
            hold-trigger-on-release;
        };
        lctrl: left_ctrl_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_CTRL_MOD";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <ALL_RIGHT CTRL_LEFT>;
            hold-trigger-on-release;
        };
        lalt: left_alt_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_ALT_MOD";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <ALL_RIGHT>;
            hold-trigger-on-release;
        };
        rm: right_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PRIOR_IDLE_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <ALL_LEFT>;
            hold-trigger-on-release;
        };
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;
        };
        clt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        jk_escape {
            timeout-ms = <COMBO_TIMEOUT_MS>;
            bindings = <&rm RS(RIGHT_CONTROL) ESCAPE>;
            key-positions = <16 17>;
            layers = <DEFAULT>;
        };

        caps_word {
            timeout-ms = <COMBO_TIMEOUT_MS>;
            bindings = <&caps_word>;
            key-positions = <13 16>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <                
&kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P
&lcmd LEFT_COMMAND A  &lalt LEFT_ALT S  &lctrl LEFT_CONTROL  D  &ht LEFT_SHIFT F  &kp G  &kp H  &ht RIGHT_SHIFT J  &rm RIGHT_CONTROL K  &rm RIGHT_ALT L  &rm RIGHT_COMMAND APOSTROPHE
&kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH
&clt MEDIA ESC  &clt FN TAB  &clt NAVI SPACE   &clt SYM ENTER  &clt NUM BSPC  &clt FN ESC
            >;
        };

        navigation {
            bindings = <
&kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp PG_UP  &none  &none  &none  &none  &none
&kp LEFT_META  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp PG_DN  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &kp ENTER  &kp DEL  &none
            >;
        };

        media {
            bindings = <
&bt BT_CLR  &none  &none  &none  &none  &none  &none  &none  &none  &none
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &none  
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &kp C_PLAY_PAUSE  &kp C_MUTE  &none
            >;
        };

        numbers {
            bindings = <
&kp LBKT  &kp N7  &kp N8  &kp N9  &kp RBKT  &none  &none  &none  &none  &none
&kp SEMI  &kp N4  &kp N5  &kp N6  &kp EQUAL  &none  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_META
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH  &none  &none  &none  &kp DOT  &kp SLASH
&none  &kp MINUS  &kp N0  &none  &none  &none
            >;
        };

        symbols {
            bindings = <
&kp LBRC  &kp AMPS  &kp STAR  &kp LPAR  &kp RBRC  &none  &none  &none  &none  &none
&kp COLON  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS  &none  &none  &none  &none  &none
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp PIPE  &none  &none  &none  &none  &none
&none  &kp UNDERSCORE  &kp RPAR  &none  &none  &none
            >;
        };

        function_keys {
            bindings = <
&kp LEFT  &kp DOWN  &kp UP  &kp RIGHT &none  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&kp LEFT_META  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&none  &none  &none  &none  &none  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15
&none  &none  &none  &none  &none  &none
            >;
        };
    };
};
